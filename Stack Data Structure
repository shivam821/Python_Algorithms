# **Stack Data Structure**

A stack is a linear data structure that follows the principle of **Last In First Out (LIFO).** This means the last element inserted inside the stack is removed first.

## LIFO Principle of Stack

In programming terms, putting an item on top of the stack is called a **push**, and removing an item is called a **pop**.

![https://cdn.programiz.com/sites/tutorial2program/files/stack.png](https://cdn.programiz.com/sites/tutorial2program/files/stack.png)

## Basic Operations of Stack

There are some basic operations that allow us to perform different actions on a stack.

- **Push**: Add an element to the top of a stack
- **Pop**: Remove an element from the top of a stack
- **IsEmpty**: Check if the stack is empty
- **IsFull**: Check if the stack is full
- **Peek**: Get the value of the top element without removing it

### Working of Stack Data Structure

### The operations work as follows:

1. A pointer called TOP is used to keep track of the top element in the stack.
2. When initializing the stack, we set its value to -1 so that we can check if the stack is empty by comparing TOP == -1.
3. On pushing an element, we increase the value of TOP and place the new element in the position pointed to by TOP.
4. On popping an element, we return the element pointed to by TOP and reduce its value.
5. Before pushing, we check if the stack is already full
6. Before popping, we check if the stack is already empty

#Stack Data Structure

#creating an empty stack:
def creating_stack():
  stack = []
  return stack

#check if stack is empty:
def check_stack_empty(stack):
  return (len(stack) == 0)

#pushing an item:
def push_item(stack,item):
  stack.append(item)
  print("Item pushed : ",item)

#poping an item:
def pop_item(stack):
  if (check_stack_empty(stack)):
    print("Stack Empty")
  else:
    return stack.pop()
    print()

stack = creating_stack()
push_item(stack,str(1))
push_item(stack,str(2))
push_item(stack,str(3))
push_item(stack,str(4))
print("Poped Item : ",pop_item(stack))
print("After poping : ",str(stack))
